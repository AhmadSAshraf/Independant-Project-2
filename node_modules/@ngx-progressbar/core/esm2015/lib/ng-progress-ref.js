/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject, BehaviorSubject, timer, of, combineLatest, Subscription } from 'rxjs';
import { tap, map, skip, delay, filter, debounce, switchMap, distinctUntilChanged } from 'rxjs/operators';
export class NgProgressRef {
    /**
     * @param {?} customConfig
     * @param {?} _onDestroyCallback
     */
    constructor(customConfig, _onDestroyCallback) {
        this._onDestroyCallback = _onDestroyCallback;
        /**
         * Stream that increments and updates progress state
         */
        this._trickling = new Subject();
        /**
         * Stream that combines "_trickling" and "config" streams
         */
        this._worker = Subscription.EMPTY;
        this._state = new BehaviorSubject({ active: false, value: 0 });
        this._config = new BehaviorSubject(customConfig);
        this.state = this._state.asObservable();
        this.config = this._state.asObservable();
        this._worker = combineLatest(this._trickling, this._config).pipe(debounce((/**
         * @param {?} __0
         * @return {?}
         */
        ([start, config]) => timer(start ? config.debounceTime : 0))), switchMap((/**
         * @param {?} __0
         * @return {?}
         */
        ([start, config]) => start ? this.onTrickling(config) : this.onComplete(config)))).subscribe();
    }
    /**
     * Get current progress state
     * @private
     * @return {?}
     */
    get currState() {
        return this._state.value;
    }
    /**
     * Check if progress has started
     * @return {?}
     */
    get isStarted() {
        return this.currState.active;
    }
    /**
     * Progress start event
     * @return {?}
     */
    get started() {
        return this._state.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state.active)), distinctUntilChanged(), filter((/**
         * @param {?} active
         * @return {?}
         */
        active => active)));
    }
    /**
     * Progress ended event
     * @return {?}
     */
    get completed() {
        return this._state.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state.active)), distinctUntilChanged(), filter((/**
         * @param {?} active
         * @return {?}
         */
        active => !active)), skip(1));
    }
    /**
     * Start the progress
     * @return {?}
     */
    start() {
        this._trickling.next(true);
    }
    /**
     * Complete the progress
     * @return {?}
     */
    complete() {
        this._trickling.next(false);
    }
    /**
     * Increment the progress
     * @param {?=} amount
     * @return {?}
     */
    inc(amount) {
        /** @type {?} */
        const n = this.currState.value;
        if (!this.isStarted) {
            this.start();
        }
        else {
            if (typeof amount !== 'number') {
                amount = this._config.value.trickleFunc(n);
            }
            this.set(n + amount);
        }
    }
    /**
     * Set the progress
     * @param {?} n
     * @return {?}
     */
    set(n) {
        this.setState({ value: this.clamp(n), active: true });
    }
    /**
     * Set config
     * @param {?} config
     * @return {?}
     */
    setConfig(config) {
        this._config.next(Object.assign({}, this._config.value, config));
    }
    /**
     * Destroy progress reference
     * @return {?}
     */
    destroy() {
        this._worker.unsubscribe();
        this._trickling.complete();
        this._state.complete();
        this._config.complete();
        this._onDestroyCallback();
    }
    /**
     * Set progress state
     * @private
     * @param {?} state
     * @return {?}
     */
    setState(state) {
        this._state.next(Object.assign({}, this.currState, state));
    }
    /**
     * Clamps a value to be between min and max
     * @private
     * @param {?} n
     * @return {?}
     */
    clamp(n) {
        return Math.max(this._config.value.min, Math.min(this._config.value.max, n));
    }
    /**
     * Keeps incrementing the progress
     * @private
     * @param {?} config
     * @return {?}
     */
    onTrickling(config) {
        if (!this.isStarted) {
            this.set(this._config.value.min);
        }
        return timer(0, config.trickleSpeed).pipe(tap((/**
         * @return {?}
         */
        () => this.inc())));
    }
    /**
     * Completes then resets the progress
     * @private
     * @param {?} config
     * @return {?}
     */
    onComplete(config) {
        return !this.isStarted ? of({}) : of({}).pipe(
        // Completes the progress
        tap((/**
         * @return {?}
         */
        () => this.setState({ value: 100 }))), 
        // Hides the progress bar after a tiny delay
        delay(config.speed * 1.7), tap((/**
         * @return {?}
         */
        () => this.setState({ active: false }))), 
        // Resets the progress state
        delay(config.speed), tap((/**
         * @return {?}
         */
        () => this.setState({ value: 0 }))));
    }
}
if (false) {
    /**
     * Stream that emits when progress state is changed
     * @type {?}
     * @private
     */
    NgProgressRef.prototype._state;
    /** @type {?} */
    NgProgressRef.prototype.state;
    /**
     * Stream that emits when config is changed
     * @type {?}
     * @private
     */
    NgProgressRef.prototype._config;
    /** @type {?} */
    NgProgressRef.prototype.config;
    /**
     * Stream that increments and updates progress state
     * @type {?}
     * @private
     */
    NgProgressRef.prototype._trickling;
    /**
     * Stream that combines "_trickling" and "config" streams
     * @type {?}
     * @private
     */
    NgProgressRef.prototype._worker;
    /**
     * @type {?}
     * @private
     */
    NgProgressRef.prototype._onDestroyCallback;
}
//# sourceMappingURL=data:application/json;base64,