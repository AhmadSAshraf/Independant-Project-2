import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { __assign } from 'tslib';
import { finalize } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgProgressInterceptor = /** @class */ (function () {
    function NgProgressInterceptor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? __assign({}, this._config, config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    NgProgressInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize((/**
         * @return {?}
         */
        function () {
            _this._inProgressCount--;
            if (_this._inProgressCount === 0) {
                _this._progressRef.complete();
            }
        })));
    };
    /**
     * Check if request is silent.
     * @param req request
     */
    /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    NgProgressInterceptor.prototype.checkUrl = /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var url = req.url.toLowerCase();
        /** @type {?} */
        var found = this._config.silentApis.find((/**
         * @param {?} u
         * @return {?}
         */
        function (u) { return url.startsWith(u); }));
        return !!found;
    };
    NgProgressInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: NgProgress },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
    ]; };
    return NgProgressInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgProgressHttpModule = /** @class */ (function () {
    function NgProgressHttpModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgProgressHttpModule.withConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgProgressHttpModule,
            providers: [
                { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }
            ]
        };
    };
    NgProgressHttpModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                    ]
                },] }
    ];
    return NgProgressHttpModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgProgressHttpModule, NG_PROGRESS_HTTP_CONFIG as ɵc, NgProgressInterceptor as ɵa };

//# sourceMappingURL=ngx-progressbar-http.js.map