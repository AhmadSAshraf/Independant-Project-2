(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('rxjs/operators'), require('@ngx-progressbar/core'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@ngx-progressbar/http', ['exports', '@angular/common/http', 'rxjs/operators', '@ngx-progressbar/core', '@angular/core'], factory) :
    (factory((global['ngx-progressbar'] = global['ngx-progressbar'] || {}, global['ngx-progressbar'].http = {}),global.ng.common.http,global.rxjs.operators,global.core,global.ng.core));
}(this, (function (exports,http,operators,core,core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NG_PROGRESS_HTTP_CONFIG = new core$1.InjectionToken('ngProgressHttpConfig');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgProgressInterceptor = /** @class */ (function () {
        function NgProgressInterceptor(ngProgress, config) {
            this._inProgressCount = 0;
            this._config = {
                id: 'root',
                silentApis: []
            };
            this._config = config ? __assign({}, this._config, config) : this._config;
            this._progressRef = ngProgress.ref(this._config.id);
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        NgProgressInterceptor.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (req, next) {
                var _this = this;
                // Ignore by request headers
                if (req.headers.has('ignoreProgressBar')) {
                    return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
                }
                // Ignore silent api requests
                if (this.checkUrl(req)) {
                    return next.handle(req);
                }
                this._inProgressCount++;
                if (!this._progressRef.isStarted) {
                    this._progressRef.start();
                }
                return next.handle(req).pipe(operators.finalize(( /**
                 * @return {?}
                 */function () {
                    _this._inProgressCount--;
                    if (_this._inProgressCount === 0) {
                        _this._progressRef.complete();
                    }
                })));
            };
        /**
         * Check if request is silent.
         * @param req request
         */
        /**
         * Check if request is silent.
         * @private
         * @param {?} req request
         * @return {?}
         */
        NgProgressInterceptor.prototype.checkUrl = /**
         * Check if request is silent.
         * @private
         * @param {?} req request
         * @return {?}
         */
            function (req) {
                /** @type {?} */
                var url = req.url.toLowerCase();
                /** @type {?} */
                var found = this._config.silentApis.find(( /**
                 * @param {?} u
                 * @return {?}
                 */function (u) { return url.startsWith(u); }));
                return !!found;
            };
        NgProgressInterceptor.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        NgProgressInterceptor.ctorParameters = function () {
            return [
                { type: core.NgProgress },
                { type: undefined, decorators: [{ type: core$1.Optional }, { type: core$1.Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
            ];
        };
        return NgProgressInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgProgressHttpModule = /** @class */ (function () {
        function NgProgressHttpModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        NgProgressHttpModule.withConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: NgProgressHttpModule,
                    providers: [
                        { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }
                    ]
                };
            };
        NgProgressHttpModule.decorators = [
            { type: core$1.NgModule, args: [{
                        providers: [
                            { provide: http.HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                        ]
                    },] }
        ];
        return NgProgressHttpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgProgressHttpModule = NgProgressHttpModule;
    exports.ɵc = NG_PROGRESS_HTTP_CONFIG;
    exports.ɵa = NgProgressInterceptor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-progressbar-http.umd.js.map